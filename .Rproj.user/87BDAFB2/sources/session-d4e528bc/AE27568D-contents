---
title: "Introdução ao R"
format: html
warning: false
message: false
---

# O que é o R?

```{r, echo=FALSE}
library(knitr)
knitr::include_graphics("C:/Users/carlo/Documents/GitHub/FIP606-2024/Foto1.jpg")
```

R é uma linguagem de programação que vem se especializando na manipulação, análise e visualização de dados. Foi criado originalmente por Ross Ihaka e por Robert Gentleman no departamento de Estatística da Universidade de Auckland, Nova Zelândia.

Dentre as suas vantagens, pode-se destacar a sua adaptação aos sistemas operacionais Linux, Mac OS e Windows, sendo um programa de código livre e desenvolvido por seus próprios usuários, que criam documentos facilmente reprodutíveis e modificáveis. Além disso, possui uma comunidade extensa e ativa de usuários ao redor do mundo que todos os dias desenvolvem novas funcionalidades e pacotes para o programa e oferecem soluções para os problemas que possam surgir.

O uso do software R é facilitado quando utilizamos o software **RStudio**, um ambiente de desenvolvimento integrado ao R, que apresenta uma interface gráfica mais amigável para o R, com muitos recursos úteis que facilitam a visualização do código R, a importação de conjunto de dados, a visualização de figuras, etc.

## Instalação do R e RStudio

Como o RStudio é uma interface para uso do R, ele deve ser instalado após a instalação do R.

O R é instalado a partir da página do R na internet, que pode ser acessada clicando [aqui](https://cran.r-project.org/).

O RStudio é instalado em uma página separada, que pode ser acessada clicando [aqui](https://www.rstudio.com/).

# Aprendendo a utilizar o RStudio

```{r, echo=FALSE}
knitr::include_graphics("C:/Users/carlo/Documents/GitHub/FIP606-2024/Foto2.png")
```

Ao abrir o RStudio, aparece uma tela com 4 painéis assim como apresentado na imagem acima. Entender a função de cada painel é essencial para o uso do RStudio.

**Painel 1**: Neste painel é onde será escrito e criado o arquivo com o código R a ser executado e também onde é visualizado e editado um arquivo já criado. É possível trabalhar simultaneamente com 2 ou mais arquivos com códigos R. Para executar uma linha basta pressionar *Ctrl + enter*, ou selecionar as linhas que se quer executar e clicar sobre o botão *Run*.

**Painel 2**: Este painel possui várias abas. Na aba **Environment**, são indicados os objetos e variáveis criados no R, que podem ser matrizes, listas e planilhas de dados. Na aba **History** é mostrado todo o histórico de comandos executados.

**Painel 3**: Na aba **Files** é possível visualizar todos os arquivos que estão dentro da pasta de trabalho do R. Na aba **Plots** é onde é visualizado todos os gráficos produzidos com o R, e de onde é possível salvar individualmente cada figura clicando em *Export*. A aba **Packages** mostra a lista de todos os pacotes atualmente instalados no R. Na aba **Help** é possível obter ajuda sobre funções, pacotes e sobre conjuntos de dados específicos.

**Painel 4**: Na aba **Console** é onde aparecem os códigos compilados no R e os resultados obtidos com sua execução. Ao invés de executar o código R a partir do painel 1, o código R pode ser digitado diretamente na linha de comandos. Não é possível apagar os comandos que foram compilados no R nem os seus resultados, mas é possível limpar a janela clicando *Ctrl+l*.

## RStudio Project

Antes de começar a executar comandos no R, a criação de um **RStudio Projects** é uma ótima forma de manter o seu trabalho organizado. Ele mantém todos os scripts, documentos e dados em um único lugar, deixando-os separados de outros arquivos e projetos. Isso permite trabalhar com diferentes projetos ao mesmo tempo sem um interferir no outro.

Para criar um novo projeto, é necessário clicar em *File*, depois *New Project*, escolher um *Directory* (pasta do arquivo) existente ou criar um novo e nomear o projeto.

# R Script, R Markdown e Quarto

Agora que você aprendeu como o RStudio funciona, o próximo passo é começar a montar os seus scripts. O **script** é o documento onde são escritos todos os comandos que serão executados pelo programa R. Para criar um novo script, basta clicar em *New File* e selecionar *R Script*. Também é possível criar um novo script pelo atalho *Ctrl + Shift + N*.

Além do **R Script**, 2 outros tipos de arquivo podem ser criados através do *New File*: o **R Markdown** e o **Quarto Document**.

::: callout-tip
## Qual arquivo usar?

Entre esses 3 arquivos, recomenda-se o uso do **Quarto Document** por ser uma versão mais atualizada e conter muito mais funções do que os demais arquivos. Além dele ser capaz de ser renderizado em formatos como HTML, Word e outros.
:::

# Aprendendo a utilizar o Quarto

O **Quarto** é uma versão mais avançada e atualizada do R Markdown, incluindo dezenas de novos recursos e sendo capaz de renderizar a maioria dos arquivos `.Rmd` existentes sem modificação, possibilitando a criação de relatórios ou textos em diferentes formatos (HTML, PDF, Word e outros).

Para a criação de um documento R Quarto Markdown, deve-se clicar em *New File* e posteriormente em *Quarto Document*. Após nomear o arquivo e escolher o formato em que ele será renderizado (HTML, PDF ou Word), ele estará pronto para ser usado.

## Chunk

O principal mecanismo para executar qualquer código no R envolve primeiro a criação de um **chunk**. O **chunk** permite que as funções e demais códigos sejam executadas e rodadas no documento. Um atalho que pode ser usado para sua criação é o *Ctrl + Alt + I*.

::: callout-note
Qualquer código que tenha como função a importação, manipulação, análise e visualização de dados precisa ser realizado dentro de um **chunk** para que ele possa ser lido e executado pelo R!
:::

## Texto

Durante a escrita, podemos colocar palavras em *itálico* usando 1 asterisco no início e no final da palavra, do mesmo modo podemos colocar palavras em **negrito** usando 2 asteriscos.

Para criar títulos e subtítulos, podemos colocar "\#" no início da frase. Um "\#" representa o título, enquanto "\##" e "\###" representam subtítulos.

Dentro de um chunk, podemos colocar palavras e/ou frases entre aspas ou com um `#` na frente para que ele seja rodado como um texto, e não como dado.

## Estruturas da linguagem R

-   **Valores ou values**: são criadas pelo programador com a finalidade de salvar informações. As informações inseridas em um valor ficarão disponíveis para utilização enquanto o valor existir.

-   **Funções**: são um conjunto de instruções pré-definidas que executam uma ou mais tarefas. Existem muitas funções já prontas para sua utilização, salvas em pacotes desenvolvidos para facilitar a criação de scripts. Quanto mais funções o programador conhecer, mais fácil será escrever seus scripts.

-   **Operadores**: com os operadores fazemos operações matemáticas, como soma, divisão, multiplicação, etc.

-   **Tipos de dados**: *numeric* (números), *characters* (operações com letras, palavras, frases, etc.), *factors* (categorias) e *logicals* (verdadeiro ou falso). Esses são os tipos de dados básicos existentes na linguagem R.

-   **Estrutura de dados**: *vectors*, que são uma sequência de dados do mesmo tipo. *Lists*, que são vetores com tipos de dados diferentes. *Matrix*, que possuem duas dimensões e um tipo de dado. *Data frames*, que são estruturas mais complexas, similares as planilhas do Excel e com tipos de dados diferentes.

-   **Condicional**: No condicional *If*, dizemos que se algo é verdadeiro, uma ação deve ser realizada, se não é, outra será (ou nenhuma).

## Atribuição de Valores

Quando queremos atribuir um valor para algum nome, podemos utilizar `<-`. Desse modo, se quisermos trabalhar com esses valores ou conjunto de valores atribuídos a um nome, podemos utilizar diretamente o nome, sem precisar repetir o valor.

```{r}
x <- 10
x

y <- x*10
y

z <- x*y
z
```

## Conjunto de valores e data frame

Para criar um conjunto de valores, pode-se utilizar `c()`e colocar os valores desejados. Caso os valores sejam contínuos, pode-se agrupá-los usando `:`, desse modo o conjunto será formado por todos os valores que estão entre os dois números colocados.

```{r}
A <- c(1:10)
A
B <- c(11:20)
B
```

O *data frame* é uma estrutura em que os dados podem ser organizados em formato de tabela. Ele pode ser criado por meio da junção de dois ou mais conjunto de dados, usando a função `data.frame()`, mas, para isso, o número de valores presentes nos conjuntos deve ser o mesmo.

```{r}
df <- data.frame(A,B)
df
```

## Pipe

Quando quisermos que todas as funções executadas estejam se referindo a um determinado *data frame* sem precisar chamá-lo repetidamente, podemos usar um **pipe**. O pipe, executado por `|>`ou `%>%`, indica que todas as funções abaixo dele estão se referindo ao *data frame* especificado. Um atalho para a criação do pipe é *Ctrl + Shift + M*.

```{r}
df2 <- cars
cars
df2$dist2 <- c(1:50) # O $ é usado para criar uma nova coluna dentro do df2
df2

library(tidyverse)

df2 |>
  mutate(dist3 = dist2+1) |> 
  select(1)
```

## Renderização

Para transformar esse documento `.qmd` em HTML ou em outros formatos, é necessário renderizar o documento. Para isso basta clicar no **Render** para que o documento ou site seja criado.

::: callout-tip
## Quer saber mais sobre o R?

Acesse esses livros e sites para mais informações sobre o R: - [R for Data Science](https://r4ds.had.co.nz/) - [The Art of Data Science](https://bookdown.org/rdpeng/artofdatascience/) - [An Introduction to R](https://intro2r.com/)
:::
