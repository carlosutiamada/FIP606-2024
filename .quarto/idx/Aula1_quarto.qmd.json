{"title":"Introdução ao R","markdown":{"yaml":{"title":"Introdução ao R","format":"html","warning":false,"message":false},"headingText":"O que é o R?","containsRefs":false,"markdown":"\n\n\n```{r, echo=FALSE}\nlibrary(knitr)\nknitr::include_graphics(\"C:/Users/carlo/Documents/GitHub/FIP606-2024/Foto1.jpg\")\n```\n\nR é uma linguagem de programação que vem se especializando na manipulação, análise e visualização de dados. Foi criado originalmente por Ross Ihaka e por Robert Gentleman no departamento de Estatística da Universidade de Auckland, Nova Zelândia.\n\nDentre as suas vantagens, pode-se destacar a sua adaptação aos sistemas operacionais Linux, Mac OS e Windows, sendo um programa de código livre e desenvolvido por seus próprios usuários, que criam documentos facilmente reprodutíveis e modificáveis. Além disso, possui uma comunidade extensa e ativa de usuários ao redor do mundo que todos os dias desenvolvem novas funcionalidades e pacotes para o programa e oferecem soluções para os problemas que possam surgir.\n\nO uso do software R é facilitado quando utilizamos o software **RStudio**, um ambiente de desenvolvimento integrado ao R, que apresenta uma interface gráfica mais amigável para o R, com muitos recursos úteis que facilitam a visualização do código R, a importação de conjunto de dados, a visualização de figuras, etc.\n\n## Instalação do R e RStudio\n\nComo o RStudio é uma interface para uso do R, ele deve ser instalado após a instalação do R.\n\nO R é instalado a partir da página do R na internet, que pode ser acessada clicando [aqui](https://cran.r-project.org/).\n\nO RStudio é instalado em uma página separada, que pode ser acessada clicando [aqui](https://www.rstudio.com/).\n\n# Aprendendo a utilizar o RStudio\n\n```{r, echo=FALSE}\nknitr::include_graphics(\"C:/Users/carlo/Documents/GitHub/FIP606-2024/Foto2.png\")\n```\n\nAo abrir o RStudio, aparece uma tela com 4 painéis assim como apresentado na imagem acima. Entender a função de cada painel é essencial para o uso do RStudio.\n\n**Painel 1**: Neste painel é onde será escrito e criado o arquivo com o código R a ser executado e também onde é visualizado e editado um arquivo já criado. É possível trabalhar simultaneamente com 2 ou mais arquivos com códigos R. Para executar uma linha basta pressionar *Ctrl + enter*, ou selecionar as linhas que se quer executar e clicar sobre o botão *Run*.\n\n**Painel 2**: Este painel possui várias abas. Na aba **Environment**, são indicados os objetos e variáveis criados no R, que podem ser matrizes, listas e planilhas de dados. Na aba **History** é mostrado todo o histórico de comandos executados.\n\n**Painel 3**: Na aba **Files** é possível visualizar todos os arquivos que estão dentro da pasta de trabalho do R. Na aba **Plots** é onde é visualizado todos os gráficos produzidos com o R, e de onde é possível salvar individualmente cada figura clicando em *Export*. A aba **Packages** mostra a lista de todos os pacotes atualmente instalados no R. Na aba **Help** é possível obter ajuda sobre funções, pacotes e sobre conjuntos de dados específicos.\n\n**Painel 4**: Na aba **Console** é onde aparecem os códigos compilados no R e os resultados obtidos com sua execução. Ao invés de executar o código R a partir do painel 1, o código R pode ser digitado diretamente na linha de comandos. Não é possível apagar os comandos que foram compilados no R nem os seus resultados, mas é possível limpar a janela clicando *Ctrl+l*.\n\n## RStudio Project\n\nAntes de começar a executar comandos no R, a criação de um **RStudio Projects** é uma ótima forma de manter o seu trabalho organizado. Ele mantém todos os scripts, documentos e dados em um único lugar, deixando-os separados de outros arquivos e projetos. Isso permite trabalhar com diferentes projetos ao mesmo tempo sem um interferir no outro.\n\nPara criar um novo projeto, é necessário clicar em *File*, depois *New Project*, escolher um *Directory* (pasta do arquivo) existente ou criar um novo e nomear o projeto.\n\n# R Script, R Markdown e Quarto\n\nAgora que você aprendeu como o RStudio funciona, o próximo passo é começar a montar os seus scripts. O **script** é o documento onde são escritos todos os comandos que serão executados pelo programa R. Para criar um novo script, basta clicar em *New File* e selecionar *R Script*. Também é possível criar um novo script pelo atalho *Ctrl + Shift + N*.\n\nAlém do **R Script**, 2 outros tipos de arquivo podem ser criados através do *New File*: o **R Markdown** e o **Quarto Document**.\n\n::: callout-tip\n## Qual arquivo usar?\n\nEntre esses 3 arquivos, recomenda-se o uso do **Quarto Document** por ser uma versão mais atualizada e conter muito mais funções do que os demais arquivos. Além dele ser capaz de ser renderizado em formatos como HTML, Word e outros.\n:::\n\n# Aprendendo a utilizar o Quarto\n\nO **Quarto** é uma versão mais avançada e atualizada do R Markdown, incluindo dezenas de novos recursos e sendo capaz de renderizar a maioria dos arquivos `.Rmd` existentes sem modificação, possibilitando a criação de relatórios ou textos em diferentes formatos (HTML, PDF, Word e outros).\n\nPara a criação de um documento R Quarto Markdown, deve-se clicar em *New File* e posteriormente em *Quarto Document*. Após nomear o arquivo e escolher o formato em que ele será renderizado (HTML, PDF ou Word), ele estará pronto para ser usado.\n\n## Chunk\n\nO principal mecanismo para executar qualquer código no R envolve primeiro a criação de um **chunk**. O **chunk** permite que as funções e demais códigos sejam executadas e rodadas no documento. Um atalho que pode ser usado para sua criação é o *Ctrl + Alt + I*.\n\n::: callout-note\nQualquer código que tenha como função a importação, manipulação, análise e visualização de dados precisa ser realizado dentro de um **chunk** para que ele possa ser lido e executado pelo R!\n:::\n\n## Texto\n\nDurante a escrita, podemos colocar palavras em *itálico* usando 1 asterisco no início e no final da palavra, do mesmo modo podemos colocar palavras em **negrito** usando 2 asteriscos.\n\nPara criar títulos e subtítulos, podemos colocar \"\\#\" no início da frase. Um \"\\#\" representa o título, enquanto \"\\##\" e \"\\###\" representam subtítulos.\n\nDentro de um chunk, podemos colocar palavras e/ou frases entre aspas ou com um `#` na frente para que ele seja rodado como um texto, e não como dado.\n\n## Estruturas da linguagem R\n\n-   **Valores ou values**: são criadas pelo programador com a finalidade de salvar informações. As informações inseridas em um valor ficarão disponíveis para utilização enquanto o valor existir.\n\n-   **Funções**: são um conjunto de instruções pré-definidas que executam uma ou mais tarefas. Existem muitas funções já prontas para sua utilização, salvas em pacotes desenvolvidos para facilitar a criação de scripts. Quanto mais funções o programador conhecer, mais fácil será escrever seus scripts.\n\n-   **Operadores**: com os operadores fazemos operações matemáticas, como soma, divisão, multiplicação, etc.\n\n-   **Tipos de dados**: *numeric* (números), *characters* (operações com letras, palavras, frases, etc.), *factors* (categorias) e *logicals* (verdadeiro ou falso). Esses são os tipos de dados básicos existentes na linguagem R.\n\n-   **Estrutura de dados**: *vectors*, que são uma sequência de dados do mesmo tipo. *Lists*, que são vetores com tipos de dados diferentes. *Matrix*, que possuem duas dimensões e um tipo de dado. *Data frames*, que são estruturas mais complexas, similares as planilhas do Excel e com tipos de dados diferentes.\n\n-   **Condicional**: No condicional *If*, dizemos que se algo é verdadeiro, uma ação deve ser realizada, se não é, outra será (ou nenhuma).\n\n## Atribuição de Valores\n\nQuando queremos atribuir um valor para algum nome, podemos utilizar `<-`. Desse modo, se quisermos trabalhar com esses valores ou conjunto de valores atribuídos a um nome, podemos utilizar diretamente o nome, sem precisar repetir o valor.\n\n```{r}\nx <- 10\nx\n\ny <- x*10\ny\n\nz <- x*y\nz\n```\n\n## Conjunto de valores e data frame\n\nPara criar um conjunto de valores, pode-se utilizar `c()`e colocar os valores desejados. Caso os valores sejam contínuos, pode-se agrupá-los usando `:`, desse modo o conjunto será formado por todos os valores que estão entre os dois números colocados.\n\n```{r}\nA <- c(1:10)\nA\nB <- c(11:20)\nB\n```\n\nO *data frame* é uma estrutura em que os dados podem ser organizados em formato de tabela. Ele pode ser criado por meio da junção de dois ou mais conjunto de dados, usando a função `data.frame()`, mas, para isso, o número de valores presentes nos conjuntos deve ser o mesmo.\n\n```{r}\ndf <- data.frame(A,B)\ndf\n```\n\n## Pipe\n\nQuando quisermos que todas as funções executadas estejam se referindo a um determinado *data frame* sem precisar chamá-lo repetidamente, podemos usar um **pipe**. O pipe, executado por `|>`ou `%>%`, indica que todas as funções abaixo dele estão se referindo ao *data frame* especificado. Um atalho para a criação do pipe é *Ctrl + Shift + M*.\n\n```{r}\ndf2 <- cars\ncars\ndf2$dist2 <- c(1:50) # O $ é usado para criar uma nova coluna dentro do df2\ndf2\n\nlibrary(tidyverse)\n\ndf2 |>\n  mutate(dist3 = dist2+1) |> \n  select(1)\n```\n\n## Renderização\n\nPara transformar esse documento `.qmd` em HTML ou em outros formatos, é necessário renderizar o documento. Para isso basta clicar no **Render** para que o documento ou site seja criado.\n\n::: callout-tip\n## Quer saber mais sobre o R?\n\nAcesse esses livros e sites para mais informações sobre o R: - [R for Data Science](https://r4ds.had.co.nz/) - [The Art of Data Science](https://bookdown.org/rdpeng/artofdatascience/) - [An Introduction to R](https://intro2r.com/)\n:::\n","srcMarkdownNoYaml":"\n\n# O que é o R?\n\n```{r, echo=FALSE}\nlibrary(knitr)\nknitr::include_graphics(\"C:/Users/carlo/Documents/GitHub/FIP606-2024/Foto1.jpg\")\n```\n\nR é uma linguagem de programação que vem se especializando na manipulação, análise e visualização de dados. Foi criado originalmente por Ross Ihaka e por Robert Gentleman no departamento de Estatística da Universidade de Auckland, Nova Zelândia.\n\nDentre as suas vantagens, pode-se destacar a sua adaptação aos sistemas operacionais Linux, Mac OS e Windows, sendo um programa de código livre e desenvolvido por seus próprios usuários, que criam documentos facilmente reprodutíveis e modificáveis. Além disso, possui uma comunidade extensa e ativa de usuários ao redor do mundo que todos os dias desenvolvem novas funcionalidades e pacotes para o programa e oferecem soluções para os problemas que possam surgir.\n\nO uso do software R é facilitado quando utilizamos o software **RStudio**, um ambiente de desenvolvimento integrado ao R, que apresenta uma interface gráfica mais amigável para o R, com muitos recursos úteis que facilitam a visualização do código R, a importação de conjunto de dados, a visualização de figuras, etc.\n\n## Instalação do R e RStudio\n\nComo o RStudio é uma interface para uso do R, ele deve ser instalado após a instalação do R.\n\nO R é instalado a partir da página do R na internet, que pode ser acessada clicando [aqui](https://cran.r-project.org/).\n\nO RStudio é instalado em uma página separada, que pode ser acessada clicando [aqui](https://www.rstudio.com/).\n\n# Aprendendo a utilizar o RStudio\n\n```{r, echo=FALSE}\nknitr::include_graphics(\"C:/Users/carlo/Documents/GitHub/FIP606-2024/Foto2.png\")\n```\n\nAo abrir o RStudio, aparece uma tela com 4 painéis assim como apresentado na imagem acima. Entender a função de cada painel é essencial para o uso do RStudio.\n\n**Painel 1**: Neste painel é onde será escrito e criado o arquivo com o código R a ser executado e também onde é visualizado e editado um arquivo já criado. É possível trabalhar simultaneamente com 2 ou mais arquivos com códigos R. Para executar uma linha basta pressionar *Ctrl + enter*, ou selecionar as linhas que se quer executar e clicar sobre o botão *Run*.\n\n**Painel 2**: Este painel possui várias abas. Na aba **Environment**, são indicados os objetos e variáveis criados no R, que podem ser matrizes, listas e planilhas de dados. Na aba **History** é mostrado todo o histórico de comandos executados.\n\n**Painel 3**: Na aba **Files** é possível visualizar todos os arquivos que estão dentro da pasta de trabalho do R. Na aba **Plots** é onde é visualizado todos os gráficos produzidos com o R, e de onde é possível salvar individualmente cada figura clicando em *Export*. A aba **Packages** mostra a lista de todos os pacotes atualmente instalados no R. Na aba **Help** é possível obter ajuda sobre funções, pacotes e sobre conjuntos de dados específicos.\n\n**Painel 4**: Na aba **Console** é onde aparecem os códigos compilados no R e os resultados obtidos com sua execução. Ao invés de executar o código R a partir do painel 1, o código R pode ser digitado diretamente na linha de comandos. Não é possível apagar os comandos que foram compilados no R nem os seus resultados, mas é possível limpar a janela clicando *Ctrl+l*.\n\n## RStudio Project\n\nAntes de começar a executar comandos no R, a criação de um **RStudio Projects** é uma ótima forma de manter o seu trabalho organizado. Ele mantém todos os scripts, documentos e dados em um único lugar, deixando-os separados de outros arquivos e projetos. Isso permite trabalhar com diferentes projetos ao mesmo tempo sem um interferir no outro.\n\nPara criar um novo projeto, é necessário clicar em *File*, depois *New Project*, escolher um *Directory* (pasta do arquivo) existente ou criar um novo e nomear o projeto.\n\n# R Script, R Markdown e Quarto\n\nAgora que você aprendeu como o RStudio funciona, o próximo passo é começar a montar os seus scripts. O **script** é o documento onde são escritos todos os comandos que serão executados pelo programa R. Para criar um novo script, basta clicar em *New File* e selecionar *R Script*. Também é possível criar um novo script pelo atalho *Ctrl + Shift + N*.\n\nAlém do **R Script**, 2 outros tipos de arquivo podem ser criados através do *New File*: o **R Markdown** e o **Quarto Document**.\n\n::: callout-tip\n## Qual arquivo usar?\n\nEntre esses 3 arquivos, recomenda-se o uso do **Quarto Document** por ser uma versão mais atualizada e conter muito mais funções do que os demais arquivos. Além dele ser capaz de ser renderizado em formatos como HTML, Word e outros.\n:::\n\n# Aprendendo a utilizar o Quarto\n\nO **Quarto** é uma versão mais avançada e atualizada do R Markdown, incluindo dezenas de novos recursos e sendo capaz de renderizar a maioria dos arquivos `.Rmd` existentes sem modificação, possibilitando a criação de relatórios ou textos em diferentes formatos (HTML, PDF, Word e outros).\n\nPara a criação de um documento R Quarto Markdown, deve-se clicar em *New File* e posteriormente em *Quarto Document*. Após nomear o arquivo e escolher o formato em que ele será renderizado (HTML, PDF ou Word), ele estará pronto para ser usado.\n\n## Chunk\n\nO principal mecanismo para executar qualquer código no R envolve primeiro a criação de um **chunk**. O **chunk** permite que as funções e demais códigos sejam executadas e rodadas no documento. Um atalho que pode ser usado para sua criação é o *Ctrl + Alt + I*.\n\n::: callout-note\nQualquer código que tenha como função a importação, manipulação, análise e visualização de dados precisa ser realizado dentro de um **chunk** para que ele possa ser lido e executado pelo R!\n:::\n\n## Texto\n\nDurante a escrita, podemos colocar palavras em *itálico* usando 1 asterisco no início e no final da palavra, do mesmo modo podemos colocar palavras em **negrito** usando 2 asteriscos.\n\nPara criar títulos e subtítulos, podemos colocar \"\\#\" no início da frase. Um \"\\#\" representa o título, enquanto \"\\##\" e \"\\###\" representam subtítulos.\n\nDentro de um chunk, podemos colocar palavras e/ou frases entre aspas ou com um `#` na frente para que ele seja rodado como um texto, e não como dado.\n\n## Estruturas da linguagem R\n\n-   **Valores ou values**: são criadas pelo programador com a finalidade de salvar informações. As informações inseridas em um valor ficarão disponíveis para utilização enquanto o valor existir.\n\n-   **Funções**: são um conjunto de instruções pré-definidas que executam uma ou mais tarefas. Existem muitas funções já prontas para sua utilização, salvas em pacotes desenvolvidos para facilitar a criação de scripts. Quanto mais funções o programador conhecer, mais fácil será escrever seus scripts.\n\n-   **Operadores**: com os operadores fazemos operações matemáticas, como soma, divisão, multiplicação, etc.\n\n-   **Tipos de dados**: *numeric* (números), *characters* (operações com letras, palavras, frases, etc.), *factors* (categorias) e *logicals* (verdadeiro ou falso). Esses são os tipos de dados básicos existentes na linguagem R.\n\n-   **Estrutura de dados**: *vectors*, que são uma sequência de dados do mesmo tipo. *Lists*, que são vetores com tipos de dados diferentes. *Matrix*, que possuem duas dimensões e um tipo de dado. *Data frames*, que são estruturas mais complexas, similares as planilhas do Excel e com tipos de dados diferentes.\n\n-   **Condicional**: No condicional *If*, dizemos que se algo é verdadeiro, uma ação deve ser realizada, se não é, outra será (ou nenhuma).\n\n## Atribuição de Valores\n\nQuando queremos atribuir um valor para algum nome, podemos utilizar `<-`. Desse modo, se quisermos trabalhar com esses valores ou conjunto de valores atribuídos a um nome, podemos utilizar diretamente o nome, sem precisar repetir o valor.\n\n```{r}\nx <- 10\nx\n\ny <- x*10\ny\n\nz <- x*y\nz\n```\n\n## Conjunto de valores e data frame\n\nPara criar um conjunto de valores, pode-se utilizar `c()`e colocar os valores desejados. Caso os valores sejam contínuos, pode-se agrupá-los usando `:`, desse modo o conjunto será formado por todos os valores que estão entre os dois números colocados.\n\n```{r}\nA <- c(1:10)\nA\nB <- c(11:20)\nB\n```\n\nO *data frame* é uma estrutura em que os dados podem ser organizados em formato de tabela. Ele pode ser criado por meio da junção de dois ou mais conjunto de dados, usando a função `data.frame()`, mas, para isso, o número de valores presentes nos conjuntos deve ser o mesmo.\n\n```{r}\ndf <- data.frame(A,B)\ndf\n```\n\n## Pipe\n\nQuando quisermos que todas as funções executadas estejam se referindo a um determinado *data frame* sem precisar chamá-lo repetidamente, podemos usar um **pipe**. O pipe, executado por `|>`ou `%>%`, indica que todas as funções abaixo dele estão se referindo ao *data frame* especificado. Um atalho para a criação do pipe é *Ctrl + Shift + M*.\n\n```{r}\ndf2 <- cars\ncars\ndf2$dist2 <- c(1:50) # O $ é usado para criar uma nova coluna dentro do df2\ndf2\n\nlibrary(tidyverse)\n\ndf2 |>\n  mutate(dist3 = dist2+1) |> \n  select(1)\n```\n\n## Renderização\n\nPara transformar esse documento `.qmd` em HTML ou em outros formatos, é necessário renderizar o documento. Para isso basta clicar no **Render** para que o documento ou site seja criado.\n\n::: callout-tip\n## Quer saber mais sobre o R?\n\nAcesse esses livros e sites para mais informações sobre o R: - [R for Data Science](https://r4ds.had.co.nz/) - [The Art of Data Science](https://bookdown.org/rdpeng/artofdatascience/) - [An Introduction to R](https://intro2r.com/)\n:::\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["styles.css"],"toc":true,"output-file":"Aula1_quarto.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.353","editor":"visual","theme":{"light":"flatly","dark":"darkly"},"title":"Introdução ao R","message":false},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}